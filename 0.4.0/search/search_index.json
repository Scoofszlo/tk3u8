{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>tk3u8 is a TikTok live downloader, written in Python. The project was based and built from Michele0303's tiktok-live-recorder, and modified for ease of use and to utilize yt-dlp and FFmpeg as a downloader. The project currently supports Windows and Linux systems.</p> <p>Some of the key features include:</p> <ul> <li>Download TikTok live stream by username through command-line</li> <li>Choose stream quality (original, uhd, hd, etc.)</li> <li>Let program download live stream once user goes online</li> <li>Public API support for creating your own scripts</li> <li>Proxy support</li> <li>Config support</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>In case you're in hurry, here is a short, quick installation and usage guide. For more comprehensive details, see the installation and usage guides.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Windows or Linux</li> <li>Python <code>v3.10</code> or greater</li> <li>FFmpeg</li> <li>uv</li> </ul>"},{"location":"#steps","title":"Steps","text":"<ol> <li>Install Python 3.10.0 or above. For Windows users, ensure <code>Add Python x.x to PATH</code> is checked.</li> <li>Install FFmpeg. For Windows users, follow this guide for proper installation.</li> <li>Open your command-line.</li> <li> <p>Install uv through <code>pip</code> command or via Standalone installer.</p> <pre><code>pip install uv\n</code></pre> </li> <li> <p>Install the latest published stable release of tk3u8 into your system.</p> <pre><code>uv tool install tk3u8\n</code></pre> </li> <li> <p>To download a live stream, simply run this:</p> <pre><code>tk3u8 username\n</code></pre> </li> <li> <p>To stop and save the live stream, just hit <code>Ctrl+C</code> once and wait for the program to finish processing and you're done! The live stream will be saved in your Downloads folder.</p> </li> </ol>"},{"location":"configuration/","title":"Configuration","text":"<p>This section explains how to configure <code>tk3u8</code> using the <code>tk3u8.conf</code> file, as well as some guides for setting up each key and value.</p>"},{"location":"configuration/#configuring-tk3u8","title":"Configuring tk3u8","text":"<p>tk3u8 can be configured through config file so that you don't have to specify some commands through command-line every time. The main configuration file is located at various locations:</p> <ul> <li>Windows: <code>%LocalAppData%/tk3u8/tk3u8.conf</code></li> <li>Linux: <code>/home/username/.local/share/tk3u8/tk3u8.conf</code></li> <li>macOS: <code>/Users/username/Library/Application Support/tk3u8/tk3u8.conf</code></li> </ul> <p>This config file will be created once you have started downloading a live stream.</p> <p>By default, the program will load the config files from these directories. However, if you want to specify the custom path of config file, simply supply the location of the config file through command-line, or if you use it through scripts, you put that upon class instantiation.</p>"},{"location":"configuration/#config-file-structure","title":"Config file structure","text":"<p>Here's what it looks like:</p> <p><pre><code>[config]\nsessionid_ss = \"0124124abcdeuj214124mfncb23tgejf\"\nwait_until_live = false\ntimeout = 45\n</code></pre> The <code>sessionid_ss</code>, <code>wait_until_live</code>, and <code>proxy</code> are what we called the keys. The corresponding values, i.e., string, boolean, and integer, are what we called values. All of these key-value pairs are group under <code>config</code>, which is called table.</p>"},{"location":"configuration/#precedence-between-config-and-cli-commands","title":"Precedence between config and CLI commands","text":"<p>Command-line options always take precedence over values set in the config file. This means any option specified from the CLI will override the corresponding values in the config file.</p> <p>For example, if you have a <code>timeout = 45</code> in the config file but you specify <code>--timeout 100</code> on the command-line, the value 100 will be used.</p>"},{"location":"configuration/#supported-config-keys","title":"Supported config keys","text":""},{"location":"configuration/#sessionid_ss","title":"sessionid_ss","text":"<p>Type: <code>string</code></p> <p>This key is used from your <code>sessionid_ss</code> cookie. You can use this to bypass certain restrictions when downloading streams. The value should be a 32-character string, which you can obtain from your browser's TikTok cookies.</p> <p>Example:</p> <pre><code>[config]\nsessionid_ss = \"0124124abcdeuj214124mfncb23tgejf\"\n</code></pre>"},{"location":"configuration/#tt_target_idc","title":"tt_target_idc","text":"<p>Type: <code>string</code></p> <p>This key is used from your <code>tt_target_idc</code> cookie. You can use this to bypass certain restrictions when downloading streams. The value can be obtained from your browser's TikTok cookies.</p> <p>Example:</p> <pre><code>[config]\ntt_target_idc = \"alisg\"\n</code></pre>"},{"location":"configuration/#wait_until_live","title":"wait_until_live","text":"<p>Type: <code>bool</code> (boolean)</p> <p>This key determines whether the program should wait for the user to go live before attempting to download. </p> <p>Set this to <code>true</code> to keep checking until the user goes live. Otherwise, the program will just exit normally.</p> <p>Example:</p> <pre><code>[config]\nwait_until_live = true  # Remember this is case-sensitive\n</code></pre>"},{"location":"configuration/#timeout","title":"timeout","text":"<p>Type: <code>int</code> (integer)</p> <p>This key sets the timeout duration (in seconds) on how long the program will wait before reching if the user is live. This value accepts an integer that is at least 1.</p> <p>Example:</p> <pre><code>[config]\ntimeout = 45  # Remember int musn't be enclosed with quotation marks\n</code></pre>"},{"location":"configuration/#force_redownload","title":"force_redownload","text":"<p>Type: <code>bool</code> (boolean)</p> <p>This key determines whether the program should reattempt to redownload the live stream. This is usually used when FFmpeg suddenly stops downloading the live stream.</p> <p>Set this to <code>true</code> to allow download reattempt.</p> <p>Example:</p> <pre><code>[config]\nforce_redownload = true\n</code></pre>"},{"location":"configuration/#use_h265","title":"use_h265","text":"<p>Type: <code>bool</code> (boolean)</p> <p>This key allows the program to download the HEVC (H.265) encoded stream instead of the default ones, which is the AVC (H.264).</p> <p>Set this to <code>true</code> to download HEVC-encoded stream.</p> <p>Example:</p> <pre><code>[config]\nuse_h265 = true\n</code></pre>"},{"location":"configuration/#proxy","title":"proxy","text":"<p>Type: <code>string</code></p> <p>This key allows you to specify a proxy server for network requests. The value should be a valid proxy URL (e.g., <code>http://127.0.0.1:8080</code>). Leave it empty if you do not want to use a proxy.</p> <p>Example:</p> <pre><code>[config]\nproxy = \"http://127.0.0.1:8080\"\n</code></pre>"},{"location":"guide/","title":"Guides","text":""},{"location":"guide/#grabbing-and-setting-up-sessionid_ss-andor-tt_target_idc","title":"Grabbing and setting up <code>sessionid_ss</code> and/or <code>tt_target_idc</code>","text":"<p>To fix issues related to <code>WAFChallengeError</code>, <code>HLSLinkNotFoundError</code>, and <code>StreamDataNotFoundError</code>, you can supply a value to <code>tt_target_idc</code> in the config file. If it doesn't work, try to supply both <code>sessionid_ss</code> and <code>tt_target_idc</code>. </p> <p>To grab these values, do the following:</p> <ol> <li>In your browser, go to https://tiktok.com and login your account.</li> <li>Open Inspect Element in your browser.</li> <li>Go to Cookies section:<ul> <li>For Google Chrome users, click the <code>Application</code>. If you can't see it, click the <code>&gt;&gt;</code>.</li> <li>For Firefox users, click the <code>Storage</code>. If you can't see it, click the <code>&gt;&gt;</code>.</li> </ul> </li> <li>On Cookies dropdown, click the <code>https://tiktok.com</code>.</li> <li>On the right hand side, find the <code>sessionid_ss</code>, as well as the <code>tt-target-idc</code>.</li> <li>Get those values and paste it in your config file located in your user data folder.</li> <li>Your config should look like this.     <pre><code>[config]\nsessionid_ss = \"0124124abcdeuj214124mfncb23tgejf\"  # Include this if only supplying tt-target-idc doesn't work\ntt_target_idc = \"alisg\"\n</code></pre></li> <li>Save it.</li> </ol> <p>Warning</p> <p>Do not share this to anyone as this is a sensitive data tied to your TikTok account.</p>"},{"location":"issues/","title":"Issues","text":"<p>This page covers the issues that may arise within the usage of the program, explains what causes them, and what you should do.</p>"},{"location":"issues/#wafchallengeerror-occasionally-pops-up","title":"<code>WAFChallengeError</code> occasionally pops up","text":"<p>Occasionally, when you download a stream from a user, you may encounter <code>WAFChallengeError</code> raised by the program. There is no solid evidence for this one, but one possible reason is that it is just the site's prevention of handling bot requests to their server.</p> <p>Based on testing so far, here are some possible temporary fixes.:</p> <ul> <li>Wait for a minute or two and try again.</li> <li>Use a VPN; or</li> <li>Set up <code>session_id_ss</code> and <code>tt_target_idc</code> in the config file. [Guide]</li> </ul>"},{"location":"issues/#hlslinknotfounderror-occurs","title":"<code>HLSLinkNotFoundError</code> occurs","text":"<p>There are three scenarios in why this error happens:</p> <ul> <li>It just sometimes pops up.</li> <li>If you live in the US region (or other nearby countriy), or if you set <code>tt_target_idc</code> to <code>useast2a</code> in the config file.</li> <li>You are downloading a stream from someone who lives in a different continent or region from you (e.g., you are somewhere from Southeast Asia but you are downloading a stream from Europe or US region.)</li> </ul> <p>As I have observed, no stream links appear for any quality (original, uhd, hd, sd, etc.), causing this error to occur. Below is an example from what gets scraped from source (with actual data removed).</p> <pre><code>{\n    \"common\": { \"...\" },\n    \"data\": {\n        \"sd\": {\n            \"main\": {\n                \"flv\": \"https://pull-q5-sg01.fcdn.eu.tiktokcdn.com/stage/stream-0000000000000000000_sd.flv?expire=0000000000&amp;sign=00000000000000000000000000000000\",\n                \"hls\": \"\",  // There should be an HLS link here, but the source only provides an empty string.\n                \"other_keys\": \"...\"\n            }\n        },\n        \"ld\": {\n            \"main\": {\n                \"flv\": \"https://pull-q5-sg01.fcdn.eu.tiktokcdn.com/stage/stream-0000000000000000000_sd.flv?expire=0000000000&amp;sign=00000000000000000000000000000000\",\n                \"hls\": \"\",  // There should be an HLS link here, but the source only provides an empty string.\n                \"other_keys\": \"...\"\n            }\n        },\n        \"other_qualities\": { \"...\" }\n    }\n}\n</code></pre> <p>To fix this issue:</p> <ul> <li>For the first scenario, just retry again.</li> <li>For the second scenario, use a VPN and/or avoid setting <code>tt_target_idc</code> in the config file. If you are using a VPN, the server that you should connect could be anywhere, as long as it is not the US servers or one nearby.<ul> <li>Alternatively, if one prefers not using VPN, you can set the <code>tt_target_idc</code> to any valid values such as <code>alisg</code> or <code>useast1a</code>. These are the valid values that I have tested and have work so far.</li> </ul> </li> <li>For the third scenario, use a VPN and connect to a server that is the same with the location of the user you are downloading from. </li> </ul> <p>The guide for setting up <code>tt_target_idc</code> in your config file is available here.</p>"},{"location":"issues/#program-randomly-finishes-downloading","title":"Program randomly finishes downloading","text":"<p>You may encounter issues wherein the program will stop downloading, with a message saying <code>Finished downloading username-20250101_120015-original.mp4...</code> even if you didn't do anything. My guess is that it could be a source issue. If the user's live stream is unstable, FFmpeg may abrutply end the downloading of stream. That's the pattern that I have observed for some time, but I still need some confirmation for this one. </p> <p>This issue can't be fixed directly with this program. However, I've implemented a feature called force redownloading, which dictates the program to reattempt downloading again as long as the user is still live. Once the user goes offline, the live stream will be saved and the program will exit normally.</p> <p>To use force redownloading, you can use <code>--force-redownload</code> command through your terminal or specify <code>force_redownload=True</code> in the parameter of <code>download()</code> in your script.</p>"},{"location":"issues/#streamdatanotfounderror-occurs","title":"<code>StreamDataNotFoundError</code> occurs","text":"<p>The cause of this exception is not yet confirmed due to limited testing, but I suspect that this is due to live restrictions. To fix this, you have to supply <code>sessionid_ss</code> in your config file.</p>"},{"location":"issues/#sometimes-h265-encoded-stream-has-the-same-size-as-the-default-ones","title":"Sometimes H.265 encoded stream has the same size as the default ones","text":"<p>For some context, in video compression world, to save a lot of space, H.265 is the video codec that is used by many people as it offers 30-40% space savings at the same quality as H.264. For that reason, you will be tempted to use this to save space, hence the availability of option <code>--use-h265</code>.</p> <p>However, there is a tendency that if you tried downloading the H.265 and H.264 encoded live streams, you might noticed both has same file sizes. In this case, it might be better to compare both videos and see which one has the better quality. Based on my past testings, H.265 encoded ones has slightly better quality as there is some detail loss with H.264 version when zoomed in.</p> <p>Personally, I would recommended choosing H.265 for that particular case but you should still check it by yourself just to be sure.</p>"},{"location":"installation/","title":"Installation","text":"<p>Learn how to install the program using any of the following methods:</p> <ul> <li>System-wide installation via uv - This is my recommended method for most users as you can easily run the program from your terminal anywhere.</li> <li>Isolated installation via uv - Preferred method for those who will use this program for their scripts.</li> <li>System-wide installation via pip - Alternative method from the first ones, but may cause issues related to system's package dependencies.</li> </ul>"},{"location":"installation/isolated-installation-via-uv/","title":"Isolated installation via uv","text":"<p>This method uses uv to install and run the program.</p> <p>This installation method is preferred if you want to install the program on a specific folder of your choice (e.g., Documents folder) so that all of the installation and opening of the program only happens there.</p> <p>If you also write scripts to download live streams, this is also the recommended installation.</p>"},{"location":"installation/isolated-installation-via-uv/#requirements","title":"Requirements","text":"<ul> <li>Windows or Linux</li> <li>Python <code>v3.10</code> or greater</li> <li>FFmpeg</li> <li>uv</li> <li>Git (optional)</li> </ul>"},{"location":"installation/isolated-installation-via-uv/#steps","title":"Steps","text":"<ol> <li>Install Python 3.10.0 or above. For Windows users, ensure <code>Add Python x.x to PATH</code> is checked.</li> <li>Install FFmpeg. For Windows users, follow this guide for proper installation.</li> <li>Open your command-line.</li> <li> <p>Install uv through <code>pip</code> command or via Standalone installer.</p> <pre><code>pip install uv\n</code></pre> </li> <li> <p>Choose a location to store the program's data or source code, and create a folder there (e.g., create a folder named <code>tk3u8</code> inside your Documents directory).</p> </li> <li> <p>Initialize the created folder with the following command.</p> <pre><code>uv init --app\n</code></pre> <p>This will create some stuff needed to isolate the installation of dependencies to this folder.</p> </li> <li> <p>Install the latest published stable release of tk3u8 by adding it as a dependency.</p> <pre><code>uv add tk3u8\n</code></pre> <p>Alternatively, if you want to get the latest published pre-release version, run this command instead.</p> <pre><code>uv add --prerelease allow tk3u8\n</code></pre> <p>Or if you want to get the most recent update without having to wait for official pre-release, choose this one instead.</p> <pre><code>uv add git+https://github.com/Scoofszlo/tk3u8\n</code></pre> <p>Warning</p> <p>Installing pre-release versions is discouraged as I don't guaranteed them to be stable enough. Although there are testing done for these versions, it is still better if you install the latest stable instead.</p> </li> <li> <p>Run the program.</p> <p><pre><code>uv run tk3u8 -v\n</code></pre> When stable release is installed properly, the output should look like this:</p> <pre><code>tk3u8 v0.4.0\n</code></pre> </li> </ol>"},{"location":"installation/isolated-installation-via-uv/#updating-tk3u8","title":"Updating tk3u8","text":"<p>To update tk3u8, run the following command.</p> <pre><code>uv lock -P tk3u8\n</code></pre>"},{"location":"installation/system-wide-installation-via-pip/","title":"System-wide installation via pip","text":"<p>This method uses pip to install the program.</p> <p>Warning</p> <p>This method installs the program system-wide. The problem with this method is that if you have already been using Python for some other stuff in the past, there is a chance that the dependencies of this project might also exist on your computer. This could lead to conflicts, resulting in installation failures and broken functionality for this program, as well as for other programs that rely on those dependencies.</p> <p>If you are knowledgeable and able to handle potential problems, please proceed with caution.</p>"},{"location":"installation/system-wide-installation-via-pip/#requirements","title":"Requirements","text":"<ul> <li>Windows or Linux</li> <li>Python <code>v3.10</code> or greater</li> <li>FFmpeg</li> </ul>"},{"location":"installation/system-wide-installation-via-pip/#steps","title":"Steps","text":"<ol> <li>Install Python 3.10.0 or above. For Windows users, ensure <code>Add Python x.x to PATH</code> is checked.</li> <li>Install FFmpeg. For Windows users, follow this guide for proper installation.</li> <li> <p>Install the latest published stable release of tk3u8 using <code>pip install</code>.     <pre><code>pip install tk3u8\n</code></pre></p> <p>Alternatively, if you want to get the latest published pre-release version, run this command instead.</p> <pre><code>pip install --pre tk3u8\n</code></pre> <p>Or if you want to get the most recent update without having to wait for official pre-release, choose this one instead.</p> <pre><code>pip install git+https://github.com/Scoofszlo/tk3u8\n</code></pre> <p>Warning</p> <p>Installing pre-release versions is discouraged as I don't guaranteed them to be stable enough. Although there are testing done for these versions, it is still better if you install the latest stable instead.</p> </li> <li> <p>Run the program.     <pre><code>tk3u8 -v\n</code></pre>     When stable release is installed properly, the output should look like this:</p> <pre><code>tk3u8 v0.4.0\n</code></pre> </li> </ol>"},{"location":"installation/system-wide-installation-via-pip/#updating-tk3u8","title":"Updating tk3u8","text":"<p>To update tk3u8, run the following command.</p> <pre><code>pip install tk3u8 --upgrade\n</code></pre>"},{"location":"installation/system-wide-installation-via-uv/","title":"System-wide installation via uv","text":"<p>This method uses uv to install and run the program.</p> <p>This is the most recommended as the installation is the easiest, and running the program can be done in your terminal anywhere.</p>"},{"location":"installation/system-wide-installation-via-uv/#requirements","title":"Requirements","text":"<ul> <li>Windows or Linux</li> <li>Python <code>v3.10</code> or greater</li> <li>FFmpeg</li> <li>uv</li> <li>Git (optional)</li> </ul>"},{"location":"installation/system-wide-installation-via-uv/#steps","title":"Steps","text":"<ol> <li>Install Python 3.10.0 or above. For Windows users, ensure <code>Add Python x.x to PATH</code> is checked.</li> <li>Install FFmpeg. For Windows users, follow this guide for proper installation.</li> <li>Open your command-line.</li> <li> <p>Install uv through <code>pip</code> command or via Standalone installer.</p> <pre><code>pip install uv\n</code></pre> </li> <li> <p>Install the latest published stable release of tk3u8 into your system.</p> <pre><code>uv tool install tk3u8\n</code></pre> <p>Alternatively, if you want to get the latest published pre-release version, run this command instead.</p> <pre><code>uv tool install tk3u8 --pre-release allow\n</code></pre> <p>Or if you want to get the most recent update without having to wait for official pre-release, choose this one instead.</p> <pre><code>uv tool install git+https://github.com/Scoofszlo/tk3u8\n</code></pre> <p>Warning</p> <p>Installing pre-release versions is discouraged as I don't guaranteed them to be stable enough. Although there are testing done for these versions, it is still better if you install the latest stable instead.</p> </li> <li> <p>Run the program.</p> <pre><code>tk3u8 -v\n</code></pre> <p>When stable release is installed properly, the output should look like this:</p> <pre><code>tk3u8 v0.4.0\n</code></pre> </li> </ol>"},{"location":"installation/system-wide-installation-via-uv/#updating-tk3u8","title":"Updating tk3u8","text":"<p>To update tk3u8, run the following command.</p> <pre><code>uv tool upgrade tk3u8\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Learn how to use the program with the following methods:</p> <ul> <li>Using through a terminal - This is the most recommended ones as this is the intended and the most easiest way.</li> <li>Using through a script - Preferred method for those who need flexibility (e.g., downloading multiple live streams from different users all at once), but this requires more technical knowledge.</li> </ul>"},{"location":"usage/using-through-a-script/","title":"Using through a script","text":"<p>This section explains how to use the program through scripts, allowing you to give more flexibity and advaned way of downloading a live stream.</p> <p>Info</p> <p>This guide is only applicable for Windows users only.</p>"},{"location":"usage/using-through-a-script/#prerequisite","title":"Prerequisite","text":"<p>Before everything else, you must install the program via isolated installation.</p> <p>To be able to write and edit your scripts, install an IDE of your choice like Visual Studio or PyCharm. Text editor like Notepad++ will work too if you want.</p>"},{"location":"usage/using-through-a-script/#creating-a-script","title":"Creating a script","text":"<p>In the project directory, create a folder named <code>scripts</code> and create a file named <code>download-foo.py</code>. After that, write a short script where it will download a live stream from a user named <code>foo</code> as an example:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\n\ntk3u8 = Tk3u8()\ntk3u8.download(username)\n</code></pre> <p>That's basically how you can write a script.</p> <p>To simply explain, what this does is that it imports the <code>Tk3u8</code> class (line #1) so that we can use it to do a lot of cool stuff like downloading (line #6). But before we can do a lot of things like downloading, we have to create an object of that class (line #5).</p>"},{"location":"usage/using-through-a-script/#executing-a-script","title":"Executing a script","text":"<p>To execute the script, open the terminal from the project directory. After that, execute the script from the <code>scripts</code> folder:</p> <pre><code>uv run scripts/download-foo.py\n</code></pre>"},{"location":"usage/using-through-a-script/#executing-multiple-scripts","title":"Executing multiple scripts","text":"<p>If you notice, it's still a bit cumbersome to do <code>uv run scripts/download-foo.py</code> every time just to execute a script. If you have multiple scripts for downloading different live streams from different users, it would take a lot of time because you have to execute that command several times.</p> <p>In order to execute all of these scripts in one go, in your project directory, create a  batch (<code>.bat</code>) file that will execute of all these scripts.</p> <p>For example, to run these three scripts for downloading a live stream from three different users, write this in a batch file:</p> <pre><code>@echo off\nREM This code will run multiple Python scripts, each in its own terminal.\n\necho Starting Python scripts...\n\nstart cmd /k \"uv run scripts/dwnld-john.py\"\nstart cmd /k \"uv run scripts/dwnld-jane.py\"\nstart cmd /k \"uv run scripts/dwnld-chris.py\"\n\necho All scripts launched. Check the new terminal windows.\npause\n</code></pre> <p>After that, you can double-click the batch file to run it.</p> <p>If you have a lot of scripts, instead of writing the <code>start cmd /k \"uv run ...\"</code> every time, you can do this instead in your batch file:</p> <pre><code>@echo off\nREM This code will get all the Python scripts from the scripts folder\nREM and run each script in its own terminal.\n\nset \"SCRIPT_DIR=scripts\"\n\necho Starting Python scripts...\n\nfor %%f in (\"%SCRIPT_DIR%\\*.py\") do (\n    start cmd /k \"uv run \"%%f\"\"\n)\n</code></pre> <p>Then, you can now execute the batch file.</p>"},{"location":"usage/using-through-a-script/#utilizing-tk3u8-api-for-writing-your-scripts","title":"Utilizing <code>Tk3u8</code> API for writing your scripts","text":"<p>This section explains how to use the <code>Tk3u8</code> class to perform essential features like downloading, as well as configuring it based on your needs.</p>"},{"location":"usage/using-through-a-script/#downloading-a-live-stream","title":"Downloading a live stream","text":"<p>To download a live stream from a user, create a variable and type the username inside it that is enclosed with quotation marks:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\n\ntk3u8 = Tk3u8()\ntk3u8.download(username)\n</code></pre>"},{"location":"usage/using-through-a-script/#choosing-stream-quality","title":"Choosing stream quality","text":"<p>To choose a quality to download, add a parameter called <code>quality</code> inside the <code>download()</code>. Values allowed are <code>original</code>, <code>uhd_60</code>, <code>uhd</code>, <code>hd_60</code>, <code>hd</code>, <code>ld</code>, or <code>sd</code>:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\n\ntk3u8 = Tk3u8()\ntk3u8.download(username, quality=\"uhd_60\")\n</code></pre> <p>As you have noticed from previous example, the program will work fine even if you don't specify the quality. That's because the program handles this automatically, in which it defaults to <code>original</code> value if nothing was specified from the <code>quality</code> parameter.</p>"},{"location":"usage/using-through-a-script/#wait-until-live-before-downloading","title":"Wait until live before downloading","text":"<p>To wait for the user to go live and you want the program to start downloading as soon as the user goes live, add a <code>wait_until_live</code> parameter with a value of <code>True</code> (case-sensitive):</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\n\ntk3u8 = Tk3u8()\ntk3u8.download(username, wait_until_live=True)\n</code></pre>"},{"location":"usage/using-through-a-script/#setting-timeout-for-checking-live-status","title":"Setting timeout for checking live status","text":"<p>To set the timeout, add a <code>timeout</code> parameter with a value of at least 1:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\n\ntk3u8 = Tk3u8()\ntk3u8.download(username, wait_until_live=True, timeout=45)\n</code></pre> <p>When you don't specify a <code>timeout</code> value, it defaults to <code>30</code>.</p> <p>Remember that this should be used together with the <code>wait_until_live</code> parameter, which must be set to <code>True</code>.</p> <p>When <code>timeout</code> is specified but <code>wait_until_live</code> is missing, it will do nothing.</p>"},{"location":"usage/using-through-a-script/#force-redownloading","title":"Force redownloading","text":"<p>If the program happens to stop downloading randomly, you can use this in the parameter of <code>download()</code> to automatically reattempt downloading the live stream as long as the user is still live, so that you don't have to manually rerun the script just to start downloading again.</p> <p>To use this, set the parameter <code>force_redownload</code> to True:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\n\ntk3u8 = Tk3u8()\ntk3u8.download(username, force_redownload=True)\n</code></pre>"},{"location":"usage/using-through-a-script/#custom-download-location","title":"Custom download location","text":"<p>If you don't want to use the default download location of live streams, you can customize it by specifying the location of folder through <code>downloads_dir</code> parameter upon class instantiation of <code>Tk3u8</code>:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\ndownload_dir = r\"C:\\path\\to\\download_dir\"\n\ntk3u8 = Tk3u8(downloads_dir=download_dir)\ntk3u8.download(username)\n</code></pre> <p>Info</p> <p>Renember to put <code>r</code> before the path to ensure that the backslashes are handled properly.</p>"},{"location":"usage/using-through-a-script/#custom-config-file-location","title":"Custom config file location","text":"<p>If you want to specify the custom path to config file to use, simply supply the <code>config_file_path</code> parameter with the location of the config file upon class instantiation of <code>Tk3u8</code>:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\nconfig_file_path = r\"C:\\path\\to\\config-file.conf\"\n\ntk3u8 = Tk3u8(config_file_path=config_file_path)\ntk3u8.download(username)\n</code></pre> <p>Info</p> <p>Renember to put <code>r</code> before the path to ensure that the backslashes are handled properly.</p>"},{"location":"usage/using-through-a-script/#using-proxy","title":"Using proxy","text":"<p>To set the proxy, call the <code>set_proxy()</code> of tk3u8 instance and put the value inside of it enclosed in double quotation marks:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\n\ntk3u8 = Tk3u8()\ntk3u8.set_proxy(\"127.0.0.1:8080\")  # Replace this with an actual working proxy\ntk3u8.download(username)\n</code></pre> <p>Info</p> <p>Remember to put <code>set_proxy()</code> first before the <code>download()</code> because it won't work if you have swapped their positions.</p>"},{"location":"usage/using-through-a-script/#downloading-h265-encoded-live-stream","title":"Downloading H.265 encoded live stream","text":"<p>Users can opt to download H.265 (HEVC) encoded streams instead of the default ones (H.264/AVC) for potential file size savings or if one wants slightly better stream quality.</p> <p>To use this, set the parameter <code>use_h265</code> to True:</p> <pre><code>from tk3u8 import Tk3u8\n\nusername = \"foo\"\n\ntk3u8 = Tk3u8()\ntk3u8.download(username, use_h265=True)\n</code></pre> <p>This option may not always work, typically for the <code>original</code> quality, as sometimes H.265 encoded version link that is scraped by the program returns a H.264 version for some reason.</p> <p>Additionally, for some reason, there is an instance that both video codecs in some streams offer similar file sizes. However, when compared, quality is generally a bit better for H.265 version.</p> <p>For these reasons, using this option does not guarantee smaller file sizes or the same quality as H.264 ones because it is the source that controls the quality of both video codecs, so I would advise you to compare both to see if there is a file size saving or if there is a quality difference. In that way, you can decide whether to use this option or not.</p>"},{"location":"usage/using-through-terminal/","title":"Using through terminal","text":"<p>This section explains how to use the program through terminal, as well as the commands that you need.</p>"},{"location":"usage/using-through-terminal/#executing-a-command","title":"Executing a command","text":"<p>If you installed the program using system-wide installation (either via uv or pip), here are some sample commands you can execute:</p> <pre><code>tk3u8 -v\ntk3u8 username\ntk3u8 username --quality sd\n</code></pre> <p>However, if you installed the program using isolated installation via uv, open the terminal from the folder of the installed program and these will be the syntax of sample commands instead:</p> <pre><code>uv run tk3u8 -v\nuv run tk3u8 username\nuv run tk3u8 username --quality sd\n</code></pre> <p>With this method, you have to type <code>uv run ...</code> first every time you execute a command.</p>"},{"location":"usage/using-through-terminal/#commands","title":"Commands","text":""},{"location":"usage/using-through-terminal/#downloading-a-live-stream","title":"Downloading a live stream","text":"<p>To download a live stream from a user, simply run: <pre><code>tk3u8 username\n</code></pre></p> <p>If the user is not live, the program will show a message saying: <pre><code>User @username is currently offline.\n</code></pre></p> <p>If the user is live, the program will show the following output: <pre><code>User @username is now streaming live.\nStarting download for user @username (quality: original, stream Link: https://pull-hls-f16-va01.tiktokcdn.com/...) # Stream link may vary\n</code></pre></p> <p>After this message appears, you will see many messages popping up, which is from FFmpeg. If this kinda overwhelms you, you don't have to worry about these messages. It is just the library that logs its activity as it is processing and capturing the live stream data.</p>"},{"location":"usage/using-through-terminal/#saving-the-live-stream","title":"Saving the live stream","text":"<p>To stop recording and save the live stream, just hit <code>Ctrl+C</code> on your keyboard and wait for FFmpeg to finish and cleanup everything. The stream will be saved in <code>tk3u8</code> directory inside your Downloads folder. This folder will contain subfolders for each user you have downloaded from, with a filename, for example, <code>username-20251225_081015-original.mp4</code>.</p> <p>If you save a live stream with a length that is more than an hour, it may take some time for FFmpeg to save, so please be patient.</p> <p>Info</p> <p>Please don't spam <code>Ctrl+C</code> when saving the live stream. When you attempt to do a single press of it, it may seem to be unresponsive at first but it isn't actually. Just let the FFmpeg handle all of these stuff and you will be fine.</p>"},{"location":"usage/using-through-terminal/#choosing-stream-quality","title":"Choosing stream quality","text":"<p>By default, the program will download the highest quality available. If you want to specify the quality to download, simply choose either <code>original</code>, <code>uhd_60</code>, <code>uhd</code>, <code>hd_60</code>, <code>hd</code>, <code>ld</code>, or <code>sd</code>: <pre><code>tk3u8 username -q uhd\n</code></pre></p> <p>When the specified quality is not available, you will not be able to download it, thus printing this error message:</p> <pre><code>User @username is now streaming live.\nCannot proceed with downloading. The chosen quality (uhd_60) is not available for download.\n</code></pre>"},{"location":"usage/using-through-terminal/#wait-until-live-before-downloading","title":"Wait until live before downloading","text":"<p>If a user is not live yet  but you want the program to start downloading as soon as they go live, you can do this by simply adding <code>--wait-until-live</code> option in the command-line just like this:</p> <pre><code>tk3u8 username --wait-until-live\n</code></pre> <p>Alternatively, you can also set this up in the config file:</p> <pre><code>[config]\nwait_until_live = true  # Only accepts `true` or `false` values (case-sensitive)\n</code></pre> <p>With this command, the program will check if the user is live. If the user is live, the program will attempt to download the stream. Otherwise, the program will wait for the user to go live, and will check again every 30 seconds by default.</p> <p>To change how often it will check, refer to the guide below on setting the timeout.</p> <p>Tip</p> <p>The config file is located in dedicated directories depending on your operating system. Check the Configuration guide for more details.</p>"},{"location":"usage/using-through-terminal/#setting-timeout-for-checking-live-status","title":"Setting timeout for checking live status","text":"<p>This command specifies how many seconds the program will wait before rechecking if the user is live.</p> <p>To use this command, put <code>--timeout value</code> in the command-line, where <code>value</code> must be an integer that is at least 1:</p> <pre><code>tk3u8 username --wait-until-live --timeout=45\n</code></pre> <p>Ensure that <code>--wait-until-live</code> is supplied in the command-line, where order doesn't matter.</p> <p>Alternatively, you can also set this up in the config file: <pre><code>[config]\nwait_until_live = true  # Ensure that this is included and is set to true\ntimeout = 45  # Must not be enclosed with quotation marks\n\n# Order also doesn't matter here, which applies the same with other config keys\n</code></pre></p> <p>I do not suggest entering a number less than 30 seconds to avoid sending too many requests to the server. Doing this could cause potential problems with the program, and may potentially ban your IP or account (though I'm not sure with this one, but it is better to be safe than sorry).</p>"},{"location":"usage/using-through-terminal/#force-redownloading","title":"Force redownloading","text":"<p>If the program happens to stop downloading randomly, you can use this feature to automatically reattempt downloading the live stream as long as the user is still live, so that you don't have to manually re-run the commands just to start downloading again.</p> <p>To use this, add <code>--force-redownload</code> in the command-line:</p> <pre><code>tk3u8 username --force-redownload\n</code></pre> <p>Alternatively, you can also set this up in the config file:</p> <pre><code>[config]\nforce_redownload = true\n</code></pre>"},{"location":"usage/using-through-terminal/#custom-download-location","title":"Custom download location","text":"<p>If you don't want to use the default download location of live streams, you can customize it by specifying the location of folder through <code>--download-dir location</code>, where <code>location</code> is the location of folder you want to save the live stream:</p> <pre><code>tk3u8 username --download-dir \"C:\\path\\to\\download_dir\"\n</code></pre> <p>Enclosing <code>dir</code> with quotation marks is recommended so that the system can read the path properly.</p>"},{"location":"usage/using-through-terminal/#custom-config-file-location","title":"Custom config file location","text":"<p>If you want to specify the custom path to config file to use, simply supply the <code>--config-file dir</code> where <code>dir</code> is the location of the config file:</p> <pre><code>tk3u8 username --config-file \"C:\\path\\to\\config-file.conf\"\n</code></pre> <p>Enclosing <code>dir</code> with quotation marks is recommended so that the system can read the path properly.</p>"},{"location":"usage/using-through-terminal/#using-proxy","title":"Using proxy","text":"<p>You can also use a proxy by specifying the <code>IP_ADDRESS:PORT</code> in <code>--proxy</code> arg:</p> <pre><code>tk3u8 username --proxy 127.0.0.1:80\n</code></pre> <p>Or you can supply it too in the config file:</p> <pre><code>[config]\nproxy = \"127.0.0.1:80\" # Replace with your actual proxy address\n</code></pre> <p>If there are both proxy address supplied in the command-line arg and in the config file, the former will be used instead.</p> <p>For most cases, you don't really need to supply proxy and you can just skip this one instead.</p>"},{"location":"usage/using-through-terminal/#downloading-h265-encoded-live-stream","title":"Downloading H.265 encoded live stream","text":"<p>Users can opt to download H.265 (HEVC) encoded streams instead of the default ones (H.264/AVC) for potential file size savings or if one wants slightly better stream quality.</p> <p>To use this, add the <code>--use-h265</code> command:</p> <pre><code>tk3u8 username --use-h265\n</code></pre> <p>Alternatively, you can also set this up in the config file:</p> <pre><code>[config]\nuse_h265 = true\n</code></pre> <p>This option may not always work, typically for the <code>original</code> quality, as sometimes H.265 encoded version link that is scraped by the program returns a H.264 version for some reason.</p> <p>Additionally, for some reason, there is an instance that both video codecs in some streams offer similar file sizes. However, when compared, quality is generally a bit better for H.265 version.</p> <p>For these reasons, using this option does not guarantee smaller file sizes or the same quality as H.264 ones because it is the source that controls the quality of both video codecs, so I would advise you to compare both to see if there is a file size saving or if there is a quality difference. In that way, you can decide whether to use this option or not.</p>"}]}