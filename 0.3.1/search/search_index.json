{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>tk3u8 is a TikTok live downloader, written in Python. The project was based and built from Michele0303's tiktok-live-recorder, and modified for ease of use and to utilize yt-dlp and ffmpeg as a downloader. The project currently supports Windows and Linux systems.</p> <p>Some of the key features include:</p> <ul> <li>Download TikTok live stream by username through command-line</li> <li>Choose stream quality (original, uhd, hd, etc.)</li> <li>Let program download live stream once user goes online</li> <li>Proxy support</li> <li>Config support</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Usage Guide</li> <li>Configuration Guide</li> <li>Issues</li> <li>API Reference</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>See the Installation Guide to set up tk3u8 on your system.</p>"},{"location":"#troubleshooting-issues","title":"Troubleshooting Issues","text":"<ul> <li>Issues</li> <li>Configuration Guide</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>This section explains how to configure <code>tk3u8</code> using the <code>tk3u8.conf</code> file, as well as some guides for setting up each key and value.</p>"},{"location":"configuration/#the-configuration-file-tk3u8conf","title":"The configuration file: <code>tk3u8.conf</code>","text":"<p>The main configuration file is located at various locations:</p> <ul> <li>Windows: <code>%LocalAppData%/tk3u8/tk3u8.conf</code></li> <li>Linux: <code>/home/username/.local/share/tk3u8/tk3u8.conf</code></li> <li>macOS: <code>/Users/username/Library/Application Support/tk3u8/tk3u8.conf</code></li> </ul> <p>This config file will be created once you have started downloading a live stream. Alternatively, you can manually create one with this format:</p> <pre><code>[config]\nsessionid_ss = \"\"      # Your TikTok sessionid_ss cookie\ntt_target_idc = \"\"     # Your TikTok tt-target-idc cookie\nproxy = \"\"             # Replace with your actual proxy address, or leave blank\n</code></pre> <ul> <li>sessionid_ss: (Optional) Used to bypass certain restrictions.</li> <li>tt_target_idc: (Optional) Used to change the server for retrieving source data.</li> <li>proxy: (Optional) Set a proxy in the format <code>IP_ADDRESS:PORT</code>.</li> </ul>"},{"location":"configuration/#guides","title":"Guides","text":""},{"location":"configuration/#grabbing-and-setting-up-sessionid_ss-andor-tt_target_idc","title":"Grabbing and setting up <code>sessionid_ss</code> and/or <code>tt_target_idc</code>","text":"<p>To fix issues related to <code>WAFChallengeError</code>, <code>StreamLinkNotFoundError</code>, and <code>StreamDataNotFoundError</code>, you can supply a value to <code>tt_target_idc</code> in the config file. If it doesn't work, try to supply both <code>sessionid_ss</code> and <code>tt_target_idc</code>. To grab these values, do the following:</p> <ol> <li>In your browser, go to https://tiktok.com and login your account.</li> <li>Open Inspect Element in your browser.</li> <li>Go to Cookies section:<ul> <li>For Google Chrome users, click the <code>Application</code>. If you can't see it, click the <code>&gt;&gt;</code>.</li> <li>For Firefox users, click the <code>Storage</code>. If you can't see it, click the <code>&gt;&gt;</code>.</li> </ul> </li> <li>On Cookies dropdown, click the <code>https://tiktok.com</code>.</li> <li>On the right hand side, find the <code>sessionid_ss</code>, as well as the <code>tt-target-idc</code>.</li> <li>Get those values and paste it in the <code>user_data/config.toml</code> of the project's folder.</li> <li>Your config should look like this.     <pre><code>[config]\nsessionid_ss = \"0124124abcdeuj214124mfncb23tgejf\"  # Include this if only supplying tt-target-idc doesn't work\ntt_target_idc = \"alisg\"\n</code></pre></li> <li>Save it.</li> </ol> <p>Remember do not share this to anyone as this is a sensitive data tied to your TikTok account.</p>"},{"location":"configuration/#setting-your-own-proxy","title":"Setting your own proxy","text":"<p>To set up the proxy, specify the value in <code>IP_ADDRESS:PORT</code> format.</p> <pre><code>[config]\nproxy = \"127.0.0.1:80\"  # Replace with your actual proxy address\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>This section will walk you through the process of setting up the required environment and installing all necessary dependencies to get tk3u8 running on your system.</p>"},{"location":"installation/#installation-methods","title":"Installation methods","text":""},{"location":"installation/#isolated-installation-via-pip","title":"Isolated installation (via pip)","text":"<p>This method installs the program via <code>pip</code> and uses uv to run the program.</p> <p>Tip</p> <p>This method is the most recommended for most users.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Windows or Linux</li> <li>Python <code>&gt;=3.10.0</code></li> <li>ffmpeg</li> <li>uv</li> </ul>"},{"location":"installation/#steps","title":"Steps","text":"<ol> <li>Install Python 3.10.0 or above. Ensure <code>Add Python x.x to PATH</code> is checked.</li> <li>Install ffmpeg. Ensure ffmpeg is added to PATH.</li> <li>Install Git.</li> <li> <p>Install uv, through <code>pip</code> command or via Standalone installer.</p> <pre><code>pip install uv\n</code></pre> </li> <li> <p>Choose a location to store the program's data or source code, and create a folder there (e.g., create a folder named <code>tk3u8</code> inside your Documents directory).</p> </li> <li> <p>Initialize the created folder. This will create some stuff needed to isolate the installation of dependencies to this folder.</p> <pre><code>uv init --app\n</code></pre> </li> <li> <p>Install tk3u8 by adding it as a dependency.</p> <pre><code>uv add tk3u8\n</code></pre> <p>This will install the tk3u8 package, as well as the dependencies needed by this program.</p> </li> <li> <p>Run the program.     <pre><code>uv run tk3u8 -h\n</code></pre>     When installed properly, the output should look like this:     <pre><code>Usage: tk3u8 [-h] [-q {original,uhd_60,uhd,hd_60,hd,ld,sd}] [--proxy PROXY]\n             [--wait-until-live] [--timeout TIMEOUT] [--log-level {DEBUG,ERROR}] \n             [-v] username\n\ntk3u8 - A TikTok live downloader\n\nPositional Arguments:\n  username              The username to be used for recording live stream\n\nOptions:\n  -h, --help            show this help message and exit\n  -q {original,uhd_60,uhd,hd_60,hd,ld,sd}\n                        Specify the quality of the video to download. Default: original\n  --proxy PROXY         The proxy server to use for downloading. Sample format: 127.0.0.1:8080\n  --wait-until-live     Let the program wait until the user goes live to start downloading stream\n  --timeout TIMEOUT     Set the timeout in seconds before rechecking if the user is live.\n  --log-level {DEBUG,ERROR}\n                        Set the logging level (default: no logging if not used)\n  -v, --version         Show the program's version\n</code></pre></p> </li> </ol>"},{"location":"installation/#isolated-installation-via-git","title":"Isolated installation (via Git)","text":"<p>This step clones the source code from repository using Git and uses <code>uv</code> to run the program.</p> <p>Info</p> <p>This method is recommended if you want to get latest updates of the program so that you don't have to wait for published releases.</p>"},{"location":"installation/#requirements_1","title":"Requirements","text":"<ul> <li>Windows or Linux</li> <li>Python <code>&gt;=3.10.0</code></li> <li>ffmpeg</li> <li>uv</li> <li>Git</li> </ul>"},{"location":"installation/#steps_1","title":"Steps","text":"<ol> <li>Install Python 3.10.0 or above. Ensure <code>Add Python x.x to PATH</code> is checked.</li> <li>Install ffmpeg. Ensure ffmpeg is added to PATH.</li> <li>Install Git.</li> <li> <p>Install uv, through <code>pip</code> command or via Standalone installer.</p> <pre><code>pip install uv\n</code></pre> </li> <li> <p>Clone this repository using Git.</p> <pre><code>git clone https://github.com/Scoofszlo/tk3u8.git\n</code></pre> </li> <li> <p>Change the current directory to the project's folder.     <pre><code>cd tk3u8\n</code></pre></p> </li> <li> <p>Run the program.     <pre><code>uv run tk3u8 -h\n</code></pre>     When installed properly, the output should look like this:     <pre><code>Usage: tk3u8 [-h] [-q {original,uhd_60,uhd,hd_60,hd,ld,sd}] [--proxy PROXY]\n             [--wait-until-live] [--timeout TIMEOUT] [--log-level {DEBUG,ERROR}] \n             [-v] username\n\ntk3u8 - A TikTok live downloader\n\nPositional Arguments:\n  username              The username to be used for recording live stream\n\nOptions:\n  -h, --help            show this help message and exit\n  -q {original,uhd_60,uhd,hd_60,hd,ld,sd}\n                        Specify the quality of the video to download. Default: original\n  --proxy PROXY         The proxy server to use for downloading. Sample format: 127.0.0.1:8080\n  --wait-until-live     Let the program wait until the user goes live to start downloading stream\n  --timeout TIMEOUT     Set the timeout in seconds before rechecking if the user is live.\n  --log-level {DEBUG,ERROR}\n                        Set the logging level (default: no logging if not used)\n  -v, --version         Show the program's version\n</code></pre></p> </li> </ol> <p>If you don't want to get the latest updates, you can checkout the latest published assuming v0.3.1 is the latest release and you want to use that:</p> <pre><code>git checkout tags/v0.3.1\n</code></pre>"},{"location":"installation/#system-wide-installation-via-pip","title":"System-wide installation via <code>pip</code>","text":"<p>Warning</p> <p>This method installs the program system-wide using the command <code>pip install tk3u8</code>. Use this only if you are knowledgeable enough and you are comfortable installing the dependencies of this program system-wide. Doing so may conflict with those already installed on your system so please proceed with caution.</p>"},{"location":"installation/#requirements_2","title":"Requirements","text":"<ul> <li>Windows or Linux</li> <li>Python <code>&gt;=3.10.0</code></li> <li>ffmpeg</li> </ul>"},{"location":"installation/#steps_2","title":"Steps","text":"<ol> <li>Install Python 3.10.0 or above. Ensure <code>Add Python x.x to PATH</code> is checked.</li> <li>Install ffmpeg. Ensure ffmpeg is added to PATH.</li> <li>Install <code>tk3u8</code> using <code>pip install</code>.     <pre><code>pip install tk3u8\n</code></pre></li> <li>Run the program.     <pre><code>tk3u8 -h\n</code></pre>     When installed properly, the output should look like this:     <pre><code>Usage: tk3u8 [-h] [-q {original,uhd_60,uhd,hd_60,hd,ld,sd}] [--proxy PROXY]\n             [--wait-until-live] [--timeout TIMEOUT] [--log-level {DEBUG,ERROR}] \n             [-v] username\n\ntk3u8 - A TikTok live downloader\n\nPositional Arguments:\n  username              The username to be used for recording live stream\n\nOptions:\n  -h, --help            show this help message and exit\n  -q {original,uhd_60,uhd,hd_60,hd,ld,sd}\n                        Specify the quality of the video to download. Default: original\n  --proxy PROXY         The proxy server to use for downloading. Sample format: 127.0.0.1:8080\n  --wait-until-live     Let the program wait until the user goes live to start downloading stream\n  --timeout TIMEOUT     Set the timeout in seconds before rechecking if the user is live.\n  --log-level {DEBUG,ERROR}\n                        Set the logging level (default: no logging if not used)\n  -v, --version         Show the program's version\n</code></pre></li> </ol>"},{"location":"installation/#updating-tk3u8","title":"Updating tk3u8","text":"<p>If you installed the program via pip (isolated installation), run this command: <pre><code>uv lock -P tk3u8\n</code></pre></p> <p>If you installed the program via Git (isolated installation), run this command: <pre><code>git pull origin\n</code></pre> If system-wide installation was done via pip: <pre><code>pip install tk3u8 --upgrade\n</code></pre></p>"},{"location":"installation/#verifying-installation","title":"Verifying installation","text":"<p>In case that there are some problems during the installation, ensure that all requirements are properly installed. You can verify each one by running the following commands in your terminal or command prompt:</p> <ul> <li> <p>Python <pre><code>python --version\n\n# Sample output\nPython 3.12.2\n</code></pre></p> </li> <li> <p>ffmpeg <pre><code>ffmpeg -version\n\n# Sample output\nffmpeg version 2024-11-11-git-96d45c3b21-full_build-www.gyan.dev Copyright (c) 2000-2024 the FFmpeg developers\n...\n</code></pre></p> </li> <li> <p>uv <pre><code>uv --version\n\n# Sample output\nuv 0.6.17 (8414e9f3d 2025-04-25)\n</code></pre></p> </li> <li> <p>Git <pre><code>git --version\n\n# Sample output\ngit version x.x.x\n</code></pre></p> </li> </ul> <p>If any command fails or shows an error, revisit the installation steps for that requirement.</p>"},{"location":"issues/","title":"Issues","text":"<p>This page covers the issues that may arise within the usage of the program, explains what causes them, and what should you do.</p>"},{"location":"issues/#wafchallengeerror-occasionally-pops-up","title":"<code>WAFChallengeError</code> occasionally pops up","text":"<p>Occasionally, when you download a stream from a user, you may encounter <code>WAFChallengeError</code> raised by the program. There is no solid evidence for this one, but one possible reason is that it is just the site's prevention of handling bot requests to their server.</p> <p>Based on testing so far, here are some possible temporary fixes.:</p> <ul> <li>Wait for a minute or two and try again.</li> <li>Use a VPN; or</li> <li>Set up <code>session_id_ss</code> and <code>tt_target_idc</code> in the config file. [Guide]</li> </ul>"},{"location":"issues/#hlslinknotfounderror-occurs","title":"<code>HLSLinkNotFoundError</code> occurs","text":"<p>There are three scenarios in why this error happens:</p> <ul> <li>It just sometimes pops up.</li> <li>If you live in the US region (or other nearby countriy), or if you set <code>tt_target_idc</code> to <code>useast2a</code> in the config file.</li> <li>You are downloading a stream from someone who lives in a different continent or region from you (e.g., you are somewhere from Southeast Asia but you are downloading a stream from Europe or US region.)</li> </ul> <p>As I have observed, no stream links appear for any quality (original, uhd, hd, sd, etc.), causing this error to occur. Below is an example from what gets scraped from source (with actual data removed).</p> <pre><code>{\n    \"common\": { \"...\" },\n    \"data\": {\n        \"sd\": {\n            \"main\": {\n                \"flv\": \"https://pull-q5-sg01.fcdn.eu.tiktokcdn.com/stage/stream-0000000000000000000_sd.flv?expire=0000000000&amp;sign=00000000000000000000000000000000\",\n                \"hls\": \"\",  // There should be an HLS link here, but the source only provides an empty string.\n                \"other_keys\": \"...\"\n            }\n        },\n        \"ld\": {\n            \"main\": {\n                \"flv\": \"https://pull-q5-sg01.fcdn.eu.tiktokcdn.com/stage/stream-0000000000000000000_sd.flv?expire=0000000000&amp;sign=00000000000000000000000000000000\",\n                \"hls\": \"\",  // There should be an HLS link here, but the source only provides an empty string.\n                \"other_keys\": \"...\"\n            }\n        },\n        \"other_qualities\": { \"...\" }\n    }\n}\n</code></pre> <p>To fix this issue:</p> <ul> <li>For the first scenario, just retry again.</li> <li>For the second scenario, use a VPN and/or avoid setting <code>tt_target_idc</code> in the config file. If you are using a VPN, the server that you should connect could be anywhere, as long as it is not the US servers or one nearby.<ul> <li>Alternatively, if one prefers not using VPN, you can set the <code>tt_target_idc</code> to any valid values such as alisg or useast1a. These are the valid values that I have tested and have work so far.</li> </ul> </li> <li>For the third scenario, use a VPN and connect to a server that is the same with the location of the user you are downloading from. </li> </ul> <p>The guide for setting up <code>tt_target_idc</code> in your config file is available here.</p>"},{"location":"issues/#program-randomly-finishes-downloading","title":"Program randomly finishes downloading","text":"<p>You may encounter issues wherein the program will stop downloading, with a message saying <code>Finished downloading username-20250101_120015-original.mp4...</code> even if you didn't do anything. My guess is that it could be a source issue. If the user's live stream is unstable, <code>ffmpeg</code> may abrutply end the downloading of stream. That's the pattern that I have observed for some time, but I still need some confirmation for this one. </p> <p>This issue is outside the scope of this program, so fixing it is impossibe in my end.</p>"},{"location":"issues/#streamdatanotfounderror-occurs","title":"<code>StreamDataNotFoundError</code> occurs","text":"<p>The cause of this exception is not yet confirmed due to limited testing, but I suspect that this is due to live restrictions. To fix this, you have to supply <code>sessionid_ss</code> in your config file. To set this up, refer to this guide.</p>"},{"location":"usage/","title":"Usage","text":"<p>There are two ways to use this program. For the easiest and straightforward approach, you can use the program through your terminal. Advanced users may choose to use the program within a script, however, the steps will not be included in this guide as I have to create one yet. If you are knowledgeable and have explored the source code, you can do it!</p>"},{"location":"usage/#using-through-terminal","title":"Using through terminal","text":"<p>The simplest way to use this program is through your terminal (e.g., Command Prompt on Windows). After following the installation steps, you can now use several commands to perform basic stuff like downloading a live stream. Refer to the following steps below on each command usage.</p> <p>Info</p> <p>For users who have installed the program through system-wide installation, omit the <code>uv run</code> for each command listed below.</p>"},{"location":"usage/#downloading-a-live-stream","title":"Downloading a live stream","text":"<p>To download a live stream from a user, simply run: <pre><code>uv run tk3u8 username  # Replace 'username` with actual username of the user\n</code></pre></p> <p>If the user is not live, the program will show a message saying: <pre><code>User @username is currently offline.\n</code></pre></p> <p>If the user is live, the program will show the following output: <pre><code>User @username is now streaming live.\nStarting download for user @username (quality: original, stream Link: https://pull-hls-f16-va01.tiktokcdn.com/...) # Stream link may vary\n</code></pre></p> <p>After this appears, you will see many messages popping up, which is from ffmpeg. If this kinda overwhelms you, you don't have to worry about these messages. It is just the library that logs its activity as it is processing and capturing the live stream data.</p>"},{"location":"usage/#saving-the-live-stream","title":"Saving the live stream","text":"<p>To stop recording and save the live stream, just hit <code>Ctrl+C</code> on your keyboard and wait for ffmpeg to finish and cleanup everything. The stream will be saved in <code>tk3u8</code> directory inside your Downloads folder. This folder will contain subfolders for each user you have downloaded from, with a filename, for example, <code>username-20251225_081015-original.mp4</code></p>"},{"location":"usage/#choosing-stream-quality","title":"Choosing stream quality","text":"<p>By default, the program will download the highest quality available. If you want to specify the quality to download, simply choose either <code>original</code>, <code>uhd_60</code>, <code>uhd</code>, <code>hd_60</code>, <code>hd</code>, <code>ld</code>, or <code>sd</code>. <pre><code>uv run tk3u8 username -q uhd\n</code></pre></p> <p>When the specified quality is not available, you will not be able to download it, thus printing this error message:</p> <pre><code>User @username is now streaming live.\nCannot proceed with downloading. The chosen quality (uhd_60) is not available for download.\n</code></pre>"},{"location":"usage/#wait-until-live-before-downloading","title":"Wait until live before downloading","text":"<p>If a user is not live yet  but you want the program to start downloading as soon as they go live, you can do this by simply adding <code>--wait-until-live</code> option in the command-line just like this:</p> <pre><code>uv run tk3u8 username --wait-until-live\n</code></pre> <p>With this command, the program will check if the user is live. If the user is live, the program will attempt to download the stream. Otherwise, the program will wait for the user to go live, and will check again every 30 seconds by default. To change how often it will check, refer to the guide below on setting the timeout.</p>"},{"location":"usage/#setting-timeout-for-checking-live-status","title":"Setting timeout for checking live status","text":"<p>This argument is use along with <code>--wait-until-live</code> arg. This specifies how many seconds the program will wait before rechecking if the user is live. To use this arg, put <code>--timeout value</code> in the command-line, where <code>value</code> must be an integer that is at least 1:</p> <pre><code>uv run tk3u8 username --wait-until-live --timeout=45\n</code></pre> <p>However, I do not suggest entering a number less than 30 seconds to avoid sending too many requests to the server. Doing this could cause potential problems with the program, and may potentially ban your IP or account (though I'm not sure with this one, but it is better to be safe than sorry).</p>"},{"location":"usage/#using-proxy","title":"Using proxy","text":"<p>You can also use a proxy by specifying the <code>IP_ADDRESS:PORT</code> in <code>--proxy</code> arg: <pre><code># Replace with your actual proxy address\nuv run tk3u8 username --proxy 127.0.0.1:80\n</code></pre></p> <p>Or you can supply it too in the config file located in <code>user_data/config.toml</code>: <pre><code>[config]\nproxy = \"127.0.0.1:80\" # Replace with your actual proxy address\n</code></pre></p> <p>If there are both proxy address supplied in the command-line arg and in the config file, the former will be used instead.</p> <p>For most cases, you don't really need to supply proxy and you can just skip this one instead.</p>"}]}